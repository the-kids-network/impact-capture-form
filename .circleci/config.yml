# PHP CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-php/ for more details
#
version: 2
jobs:
  build:
    docker:
      # specify the version you desire here
      - image: circleci/php:7.1-browsers
        environment:
          DB_CONNECTION: mysql
          DB_HOST: 127.0.0.1
          DB_DATABASE: homestead
          DB_USERNAME: homestead
          DB_PASSWORD: secret
          APP_ENV: circleci
      
      # Specify service dependencies here if necessary
      # CircleCI maintains a library of pre-built images
      # documented at https://circleci.com/docs/2.0/circleci-images/
      - image: circleci/mysql:5.7.23
        environment:
          MYSQL_ALLOW_EMPTY_PASSWORD: true
          MYSQL_USER: homestead
          MYSQL_DATABASE: homestead
          MYSQL_PASSWORD: secret

    working_directory: ~/repo

    steps:
      - run:
          name: Install system packages
          command: |
            sudo apt-get update && sudo apt-get -y install git libpng-dev python-pip
            sudo pip install awscli==1.15.68
      - setup_remote_docker
      - run:
          name: Install PHP extensions
          command: |
            sudo docker-php-ext-install pdo
            sudo docker-php-ext-install gd
            sudo docker-php-ext-install pdo_mysql
      - checkout
      - run:
          name: Copy .env file
          command: |
            cp .env.circleci .env
      - run:
          name: Install Composer
          command: |
            php -r "copy('https://getcomposer.org/installer', 'composer-setup.php');"
            php composer-setup.php
            php -r "unlink('composer-setup.php');"
      - run:
          name: Display PHP information
          command: |
            php -v
            php composer.phar --version
      - run:
          name: Install project dependencies
          command: php composer.phar install
      - run:
          name: PHP artisan commands
          command: |
            php artisan key:generate
            php artisan config:cache
      # Download and cache dependencies
      - restore_cache:
          keys:
          - v1-dependencies-{{ checksum "composer.json" }}
          # fallback to using the latest cache if no exact match is found
          - v1-dependencies-

      - run: composer install -n --prefer-dist

      - save_cache:
          paths:
            - ./vendor
          key: v1-dependencies-{{ checksum "composer.json" }}

      - run:
          name: install dockerize
          command: wget https://github.com/jwilder/dockerize/releases/download/$DOCKERIZE_VERSION/dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz && sudo tar -C /usr/local/bin -xzvf dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz && rm dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz
          environment:
            DOCKERIZE_VERSION: v0.3.0
      - run:
          name: Wait for db
          command: dockerize -wait tcp://localhost:3306 -timeout 1m
      - run: php artisan migrate:refresh --seed
      # run tests!
      - run:
          name: Run Unit tests
          command: |
            mkdir -p ~/phpunit
            vendor/bin/phpunit --log-junit ~/phpunit/junit.xml
          when: always
      - store_test_results:
          path: ~/phpunit
      - store_artifacts:
          path: ~/phpunit
      - run:
          name: Docker Build
          command: docker build -t tkn:$CIRCLE_SHA1 .
      - deploy:
          name: Push application Docker image
          command: |
            # Login to AWS
            aws configure set region $AWS_REGION
            $(aws ecr get-login --no-include-email)

            # Tag and push docker image
            docker tag tkn:$CIRCLE_SHA1 $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/tkn:$CIRCLE_SHA1
            docker tag tkn:$CIRCLE_SHA1 $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/tkn:latest
            docker push $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/tkn:$CIRCLE_SHA1
            docker push $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/tkn:latest