# PHP CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-php/ for more details
#
version: 2.1

commands:
  restore_node_modules_cache:
    steps:
      - restore_cache:
          keys:
            - v1-npm-dependencies-{{ checksum "package-lock.json" }}
            - v1-npm-dependencies-
  save_node_modules_cache:
    steps:
      - save_cache:
          paths:
            - ./node_modules
          key: v1-npm-dependencies-{{ checksum "package-lock.json" }}
  restore_composer_cache:
    steps:
      - restore_cache:
          keys:
            - v1-composer-dependencies-{{ checksum "composer.lock" }}
            - v1-composer-dependencies-
  save_composer_cache:
    steps:
      - save_cache:
          paths:
            - ./vendor
          key: v1-composer-dependencies-{{ checksum "composer.lock" }}
  install_v8_node:
    steps:
      - run: 
          name: Install Node
          command: |
            curl -sSL "https://nodejs.org/dist/v14.3.0/node-v14.3.0-linux-x64.tar.xz" | sudo tar --strip-components=2 -xJ -C /usr/local/bin/ node-v14.3.0-linux-x64/bin/node
      - run: 
          name: Install NPM
          command: |
            curl https://www.npmjs.com/install.sh | sudo bash
      - run: 
          name: Print Node Versions
          command: |
            node -v
            npm -v
  install_composer:
    steps:
      - run: 
          name: Install Composer
          command: |
            php -r "copy('https://getcomposer.org/installer', 'composer-setup.php');"
            php composer-setup.php
            php -r "unlink('composer-setup.php');"
      - run: 
          name: Print PHP Versions
          command: |
            php -v
            php composer.phar --version
  install_php_extensions:
    steps:
      - run:
          name: Install System Packages For PHP Extensions
          command: sudo apt update && sudo apt install libpng-dev -y
      - run:
          name: Install PHP Extensions
          command: |
            sudo docker-php-ext-install pdo
            sudo docker-php-ext-install gd
            sudo docker-php-ext-install pdo_mysql
  install_dockerize:
    steps:
      - run:
          name: Install Dockerize
          command: wget https://github.com/jwilder/dockerize/releases/download/$DOCKERIZE_VERSION/dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz && sudo tar -C /usr/local/bin -xzvf dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz && rm dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz
          environment:
            DOCKERIZE_VERSION: v0.6.1
  install_chrome_driver:
    steps:
      - run: 
          name: Install Chrome Driver
          command: |
            php artisan dusk:chrome-driver
  start_chrome_driver:
    steps:
      - run:
          name: Start Chrome Driver
          command: ./vendor/laravel/dusk/bin/chromedriver-linux
          background: true
  install_application_env_file:
    steps:
      - run: 
          name: Install .env File
          command: cp -f .env.circleci .env
  install_application_dependencies:
    steps:
      - restore_node_modules_cache
      - run: 
          name: Install App NPM Dependencies
          command: npm install
      - save_node_modules_cache
      - restore_composer_cache
      - run: 
          name: Install App Composer Dependencies
          command: php composer.phar install
      - save_composer_cache
  generate_app_key:
    steps:
      - run: 
          name: Generate App Secure Key
          command: php artisan key:generate
  apply_database_migrations:
    steps:
      - run: 
          name: Wait For Database To Come Online
          command: |
            dockerize -wait tcp://localhost:3306 -timeout 1m
      - run: 
          name: Run Database Schema Migration
          command: |
            php artisan migrate:refresh
  seed_database_with_test_data:
    steps:
      - run: 
          name: Seed Database With Test Data
          command: |
            php artisan db:seed
  start_application:
    steps:
      - run:
          name: Start Application
          command: php artisan serve
          background: true
  compile_web_assets:
    steps:
      - run: 
          name: Compile Web Assets
          command: npm run prod
  run_unit_tests: 
    steps:
      - run:
          name: Run Unit Tests
          command: vendor/bin/phpunit --log-junit test-reports/unit/report.xml
  run_browser_tests:
    steps:
      - install_chrome_driver
      - start_chrome_driver
      - seed_database_with_test_data
      - start_application
      - run: 
          name: Run Dusk Browser Tests
          command: php artisan dusk --log-junit test-reports/browser/report.xml

  # Main build top-level steps
  setup:
    steps:
      - install_php_extensions
      - install_dockerize
      - install_v8_node
      - checkout
      - install_composer
  build:
    steps:
      - install_application_env_file
      - install_application_dependencies
      - generate_app_key
      - compile_web_assets
      - apply_database_migrations
  test:
    steps:
      - run_unit_tests
      - run_browser_tests

executors:
  docker-executor:
    docker:
      - image: circleci/php:7.4.6-browsers
      - image: circleci/mysql:5.7.26
        environment:
          MYSQL_ALLOW_EMPTY_PASSWORD: true
          MYSQL_USER: homestead
          MYSQL_DATABASE: homestead
          MYSQL_PASSWORD: secret

jobs:
  build_and_test:
    executor: docker-executor
    working_directory: ~/repo
    steps:
      - setup
      - build
      - test
      - store_artifacts:
          path: ~/repo/storage/logs
      - store_artifacts:
          path: ~/repo/tests/Browser/screenshots
      - store_test_results:
          path: ~/repo/test-reports

workflows:
  build_and_test:
    jobs:
      - build_and_test



      